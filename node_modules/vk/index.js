//usage var VK = require('vk')(String token);

// Код ошибки: 14
// Текст ошибки: Captcha needed

// Если возникает данная ошибка, то в сообщении об ошибке передаются также следующие параметры:
// captcha_sid - идентификатор captcha
// captcha_img - ссылка на изображение, которое нужно показать пользователю, чтобы он ввел текст с этого изображения.

// В этом случае следует запросить пользователя ввести текст с изображения captcha_img и повторить запрос, добавив в него параметры:
// captcha_sid - полученный идентификатор
// captcha_key - текст, который ввел пользователь

// &captcha_sid=285576643628&captcha_key=qsa7

var https = require('https');

var VK = {

    protocol: 'https:',
    hostname: 'api.vk.com',
    ver: '5.52',
    token: '',
    avatars_album_id: -6,
    errors: {
        not_found: 100,
        captcha_need: 14,
        flood_control: 9
    },

    init: function (token) {

        if (!token) {
            console.log('VK isn\'t initialized: token is empty!');
            return undefined;
        }

        this.token = '&access_token=' + token + '&v=' + this.ver;

        return this;
    },

    search: function (params, callback) {
        var method = 'users.search?',
            path = '/method/' + method;

        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var value = params[key];
                path += '&' + key + '=' + value;
            }
        }
        path += this.token;

        this._doRequest(path)
            .then(callback)
            .catch(this._errHandle);
    },

    getFeed: function (start_time, end_time, callback) {

        this._doRequest('/method/newsfeed.get?source_ids=list2&filters=post&count=5&end_time=' + end_time + '&start_time=' + start_time + this.token)
            .then(callback)
            .catch(this._errHandle);

    },

    addLike: function (owner_id, item_id, captcha) {

        var capt = captcha ? '&captcha_sid=' + captcha.captcha_sid + '&captcha_key=' + captcha.captcha_key : '';

        var path = '/method/likes.add?type=photo&owner_id=' + owner_id + '&item_id=' + item_id + this.token + capt;

        return this._doRequest(path);
    },

    _doRequest: function (path) {
        var params = {protocol: this.protocol, hostname: this.hostname, path: path};

        return new Promise(function (resolve, reject) {
            https
                .get(params, function (httpResp) {
                    var vkResp = {path: path, data: ''};
                    httpResp.on('data', (chunk) => {vkResp.data += chunk;});
                    httpResp.on('end', () => {resolve(vkResp);});
                })
                .on('error', function (err) {
                    var httpResp = {path: path, data: err};

                    reject(httpResp);
                });
        });
    },

    _errHandle: function (err) {
        log(err);
    }
};


module.exports = function(token) {
    return VK.init(token);
};